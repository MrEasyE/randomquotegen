{"version":3,"sources":["components/quotebox.js","components/button.js","App.js","serviceWorker.js","index.js"],"names":["Quotebox","this","divStyle","backgroundColor","props","color","className","style","quote","author","Component","Button","onClick","newquote","Quotes","returnRandom","random","Math","floor","length","ranNum","App","state","bind","setState","returnColorObject","returnColor","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAkCeA,G,kMA7BPC,KAAKC,SAAW,CACZC,gBAAiBF,KAAKG,MAAMC,S,2CAKhCJ,KAAKC,SAAW,CACZC,gBAAiBF,KAAKG,MAAMC,S,+BAMhC,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,mBAGf,yBAAKA,UAAU,WAAWC,MAAON,KAAKC,UAClC,yBAAKI,UAAU,aACX,wBAAIA,UAAU,SAASL,KAAKG,MAAMI,MAAMA,OACxC,uBAAGF,UAAU,UAAUL,KAAKG,MAAMI,MAAMC,e,GAxBzCC,cC2BRC,E,2MAzBXT,SAAW,CACPC,gBAAiB,EAAKC,MAAMC,O,2FAI5BJ,KAAKC,SAAW,CACZC,gBAAiBF,KAAKG,MAAMC,S,2CAKhCJ,KAAKC,SAAW,CACZC,gBAAiBF,KAAKG,MAAMC,S,+BAKhC,OACI,yBAAKC,UAAU,gBACX,4BAAQM,QAASX,KAAKG,MAAMS,SAAUN,MAAON,KAAKC,UAAlD,4B,GArBKQ,aCIfI,EAAS,CACb,CACEN,MAAO,4DACPC,OAAQ,YAEV,CACED,MAAO,iJACPC,OAAQ,oBAEV,CACED,MAAO,yJACPC,OAAQ,uBAEV,CACED,MAAO,6DACPC,OAAQ,gBAEV,CACED,MAAO,oJACPC,OAAQ,kBAEV,CACED,MAAO,sIACPC,OAAQ,aAEV,CACED,MAAO,kGACPC,OAAQ,qBAINM,EAAe,WACnB,IAAIC,EAASC,KAAKC,MAAMD,KAAKD,SAAWC,KAAKC,MAAMJ,EAAOK,SAC1D,OAAOL,EAAOE,IAGVI,EAAS,WACb,OAAOH,KAAKC,MAAMD,KAAKD,SAAWC,KAAKC,MAAM,OA2DhCG,E,YAtDb,aAAc,IAAD,8BACX,+CAQFC,MAAQ,CACNjB,MAAO,mBARP,EAAKQ,SAASU,KAAd,gBAFW,E,iFAMXtB,KAAKY,a,iCASL,IAAML,EAAQO,IAGdd,KAAKuB,SAAS,CACZhB,MAAOA,IAITP,KAAKuB,SACHvB,KAAKwB,uB,oCAOP,MADO,cAAUL,IAAV,YAAsBA,IAAtB,YAAkCA,IAAlC,O,0CASP,MAJU,CACRf,MAAOJ,KAAKyB,iB,+BAOd,OACE,yBAAKpB,UAAU,OAEb,kBAAC,EAAD,CAAUD,MAAOJ,KAAKqB,MAAMjB,MAAOG,MAAOO,MAC1C,kBAAC,EAAD,CAAQV,MAAOJ,KAAKqB,MAAMjB,MAAOQ,SAAUZ,KAAKY,SAASU,KAAKtB,a,GAjDpD0B,IAAMjB,WClCJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.962b0534.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Quotebox extends Component {\r\n\r\n    componentDidMount(){\r\n        this.divStyle = {\r\n            backgroundColor: this.props.color\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.divStyle = {\r\n            backgroundColor: this.props.color // we need to call this in did update or the variable divUpdate will persist\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"quoteHolder\">\r\n                <div className=\"QuoteboxShadow\">\r\n                \r\n                </div>\r\n                <div className=\"Quotebox\" style={this.divStyle}>\r\n                    <div className=\"QuoteArea\" >\r\n                        <h2 className=\"Quote\">{this.props.quote.quote}</h2>\r\n                        <p className=\"Author\">{this.props.quote.author}</p>\r\n                    </div>\r\n                </div>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Quotebox;","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n\r\n    divStyle = {\r\n        backgroundColor: this.props.color\r\n    }\r\n\r\n    UNSAFE_componentWillMount(){\r\n        this.divStyle = {\r\n            backgroundColor: this.props.color\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.divStyle = {\r\n            backgroundColor: this.props.color\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"buttonHolder\">\r\n                <button onClick={this.props.newquote} style={this.divStyle}>Get me a new quote!</button>\r\n            </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\nimport './App.css';\n\nimport Quotebox from './components/quotebox';\nimport Button from './components/button';\n\nconst Quotes = [\n  {\n    quote: 'What a heavy burden is a name that has become too famous.',\n    author: 'Voltaire'\n  },\n  {\n    quote: 'If you are a leader, you should never forget that everyone needs encouragement. And everyone who receives it - young or old, successful or... ',\n    author: 'John C. Maxwell '\n  },\n  {\n    quote: 'America is known as a country that welcomes people to its shores. All kinds of people. The image of the Statue of Liberty with Emma Lazarus famous... ',\n    author: 'Ruth Bader Ginsburg'\n  },\n  {\n    quote: 'To be famous, in fact, one has only to kill ones landlady.',\n    author: 'Albert Camus'\n  },\n  {\n    quote: 'I remember debating the finer points of flaky pastry with my chicken-pot-pie-obsessed American dad. I remember the divine mix of Thai food, TV...',\n    author: 'Chrissy Teigen'\n  },\n  {\n    quote: 'You might not make it to the top, but if you are doing what you love, there is much more happiness there than being rich or famous.',\n    author: 'Tony Hawk'\n  },\n  {\n    quote: 'The nice thing about being a celebrity is that, if you bore people, they think its their fault.',\n    author: 'Henry Kissinger '\n  },\n];\n\nconst returnRandom = () => {\n  let random = Math.floor(Math.random() * Math.floor(Quotes.length));\n  return Quotes[random];\n}\n\nconst ranNum = () => {\n  return Math.floor(Math.random() * Math.floor(255));\n}\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.newquote.bind(this);\n  }\n\n  componentDidMount(){\n    this.newquote();\n  }\n\n  state = {\n    color: 'rgb(208,92,154)'\n  }\n\n  newquote(){\n\n    const quote = returnRandom();\n  \n    // get a new quote\n    this.setState({\n      quote: quote,\n    })\n\n    // get a new color\n    this.setState(\n      this.returnColorObject()\n    )\n\n  }\n\n  returnColor() { // give me my rgb string\n    let rgb = `rgb(${ranNum()},${ranNum()},${ranNum()})`\n    return rgb;\n  }\n\n  returnColorObject() { // creating this to push an obj into state\n    let obj = {\n      color: this.returnColor()\n    }\n\n    return obj;\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        \n        <Quotebox color={this.state.color} quote={returnRandom()}/>\n        <Button color={this.state.color} newquote={this.newquote.bind(this)}/>\n\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}